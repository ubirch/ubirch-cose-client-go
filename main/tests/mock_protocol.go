// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ubirch/ubirch-cose-client-go/main/repository (interfaces: Protocols)

// Package tests is a generated GoMock package.
package tests

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	ent "github.com/ubirch/ubirch-cose-client-go/main/ent"
)

// MockProtocols is a mock of Protocols interface.
type MockProtocols struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolsMockRecorder
}

// MockProtocolsMockRecorder is the mock recorder for MockProtocols.
type MockProtocolsMockRecorder struct {
	mock *MockProtocols
}

// NewMockProtocols creates a new mock instance.
func NewMockProtocols(ctrl *gomock.Controller) *MockProtocols {
	mock := &MockProtocols{ctrl: ctrl}
	mock.recorder = &MockProtocolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocols) EXPECT() *MockProtocolsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProtocols) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockProtocolsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProtocols)(nil).Close))
}

// GetIdentity mocks base method.
func (m *MockProtocols) GetIdentity(arg0 uuid.UUID) (ent.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", arg0)
	ret0, _ := ret[0].(ent.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockProtocolsMockRecorder) GetIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockProtocols)(nil).GetIdentity), arg0)
}

// GetUuidForPublicKey mocks base method.
func (m *MockProtocols) GetUuidForPublicKey(arg0 []byte) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUuidForPublicKey", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUuidForPublicKey indicates an expected call of GetUuidForPublicKey.
func (mr *MockProtocolsMockRecorder) GetUuidForPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUuidForPublicKey", reflect.TypeOf((*MockProtocols)(nil).GetUuidForPublicKey), arg0)
}

// StoreNewIdentity mocks base method.
func (m *MockProtocols) StoreNewIdentity(arg0 ent.Identity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNewIdentity", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNewIdentity indicates an expected call of StoreNewIdentity.
func (mr *MockProtocolsMockRecorder) StoreNewIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNewIdentity", reflect.TypeOf((*MockProtocols)(nil).StoreNewIdentity), arg0)
}

// fetchIdentityFromStorage mocks base method.
func (m *MockProtocols) fetchIdentityFromStorage(arg0 uuid.UUID) (ent.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchIdentityFromStorage", arg0)
	ret0, _ := ret[0].(ent.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchIdentityFromStorage indicates an expected call of fetchIdentityFromStorage.
func (mr *MockProtocolsMockRecorder) fetchIdentityFromStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchIdentityFromStorage", reflect.TypeOf((*MockProtocols)(nil).fetchIdentityFromStorage), arg0)
}

// fetchUuidForPublicKeyFromStorage mocks base method.
func (m *MockProtocols) fetchUuidForPublicKeyFromStorage(arg0 []byte) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchUuidForPublicKeyFromStorage", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchUuidForPublicKeyFromStorage indicates an expected call of fetchUuidForPublicKeyFromStorage.
func (mr *MockProtocolsMockRecorder) fetchUuidForPublicKeyFromStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchUuidForPublicKeyFromStorage", reflect.TypeOf((*MockProtocols)(nil).fetchUuidForPublicKeyFromStorage), arg0)
}

// isInitialized mocks base method.
func (m *MockProtocols) isInitialized(arg0 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isInitialized", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isInitialized indicates an expected call of isInitialized.
func (mr *MockProtocolsMockRecorder) isInitialized(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isInitialized", reflect.TypeOf((*MockProtocols)(nil).isInitialized), arg0)
}
