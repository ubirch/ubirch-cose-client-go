// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ubirch/ubirch-cose-client-go/main/repository (interfaces: ContextManager)

// Package tests is a generated GoMock package.
package tests

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	ent "github.com/ubirch/ubirch-cose-client-go/main/ent"
)

// MockContextManager is a mock of ContextManager interface.
type MockContextManager struct {
	ctrl     *gomock.Controller
	recorder *MockContextManagerMockRecorder
}

// MockContextManagerMockRecorder is the mock recorder for MockContextManager.
type MockContextManagerMockRecorder struct {
	mock *MockContextManager
}

// NewMockContextManager creates a new mock instance.
func NewMockContextManager(ctrl *gomock.Controller) *MockContextManager {
	mock := &MockContextManager{ctrl: ctrl}
	mock.recorder = &MockContextManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextManager) EXPECT() *MockContextManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockContextManager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockContextManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockContextManager)(nil).Close))
}

// GetIdentity mocks base method.
func (m *MockContextManager) GetIdentity(arg0 uuid.UUID) (ent.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", arg0)
	ret0, _ := ret[0].(ent.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockContextManagerMockRecorder) GetIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockContextManager)(nil).GetIdentity), arg0)
}

// GetUuidForPublicKey mocks base method.
func (m *MockContextManager) GetUuidForPublicKey(arg0 []byte) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUuidForPublicKey", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUuidForPublicKey indicates an expected call of GetUuidForPublicKey.
func (mr *MockContextManagerMockRecorder) GetUuidForPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUuidForPublicKey", reflect.TypeOf((*MockContextManager)(nil).GetUuidForPublicKey), arg0)
}

// StoreNewIdentity mocks base method.
func (m *MockContextManager) StoreNewIdentity(arg0 ent.Identity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNewIdentity", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNewIdentity indicates an expected call of StoreNewIdentity.
func (mr *MockContextManagerMockRecorder) StoreNewIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNewIdentity", reflect.TypeOf((*MockContextManager)(nil).StoreNewIdentity), arg0)
}
